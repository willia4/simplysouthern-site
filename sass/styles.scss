$font-family-sans-serif: Helvetica, Arial, sans-serif;
$font-family-base: $font-family-sans-serif;
$font-size-base: 15px;
$line-height-base: 1.50;

$navbar-default-link-color: black;
$link-color: purple;

$button-background-color: #f2f2f2;

$grid-columns: 11;
$button-offset: 1;
$button-columns: 5; 

// $screen-lg: 1400;

@import "bootstrap-compass";
@import "bootstrap-variables";
@import "bootstrap";

$hairline-color: #ccc;
$breathing-room: 20px;
$breakpoint: $screen-sm-min;
@mixin make-breakpoint-column($columns) {
	@include make-sm-column($columns);	
}
@mixin make-breakpoint-offset($columns) {
	@include make-sm-column-offset($columns);
}

//If an element is supposed to trade placed with another element depending on if there is or isn't a grid
//use this
@mixin breakpoint-swap($visibleWithGrid, $visibleWithoutGrid) {
	@media (min-width: $breakpoint) {
		#{($visibleWithGrid)} {
			display: block;
		}
		#{($visibleWithoutGrid)} {
			display: none;
		}	
	}

	@media (max-width: $breakpoint) {
		#{($visibleWithGrid)} {
			display: none;
		}	
		#{($visibleWithoutGrid)} {
			display: block;
		}	
	}
}

//create a hairline border between two adjacent elements. 
@mixin hairline-border($left, $right) {
	#{$left} {
		padding-right: $breathing-room;

		border-right-width: 1px;
		border-right-style: solid;
		border-right-color: $hairline-color;	
	}

	#{$right} {
		//Move the margin one over so the borders will overlap
		margin-left: -1px;

		padding-left: $breathing-room;
		border-left-width: 1px;
		border-left-style: solid;
		border-left-color: $hairline-color;	
	}	
}

#header {
		width: 100%;

		font-size: 200%;
		font-weight: bolder;

		text-align: center;
		display: block;

		@media(min-width: $screen-md-min) {
			font-size: 300%;

			//make this inline-block so it only takes up the amount of space that it has to. 
			//This makes centering #dining work the way one expects centering to work when the screen
			//is bigger and the grid doesn't take up the whole screen.
			display: inline-block;
		}	

		#dining {
			text-align: center;
			font-size: 80%;
			display: block;
			text-transform: uppercase;
			letter-spacing: 2px;
		}
}

#main-content {
	.content-row {
		// @include make-row();
	}	

	a.button {
		background-color: $button-background-color;

		display: block;
		color: black;

		&:hover {
			text-decoration: none;
			background-color: darken($button-background-color, 10%);
		}
	}

	.button {
		@include make-breakpoint-column($button-columns);

		text-align: center;
		padding: $breathing-room;
		border-radius: 25px;

		margin-top: $breathing-room;

		img.button-image {
			border-radius: 15px;
			max-width: 100%;
		}
	}

	.button:not(.first) {
		@include make-breakpoint-offset($button-offset);
	}
	
	.button-caption {
		text-decoration: inherit;;

		padding: $breathing-room;
		font-size: 150%;
		font-weight: bold;
		// font-variant: small-caps;
		// text-transform: lowercase;;
	}

	
}

body {
	padding-bottom: $breathing-room;
}

// #main-content {
// 	height: 100%;
// 	padding-top: 15px;

// 	border-top: 1px;
// 	border-top-style: solid;
// 	border-top-color: $hairline-color;

// 	#content-wrapper {
// 		@include make-row();
// 	}

// 	#main-content-left {
// 		@include make-breakpoint-column(4);
// 	}

// 	@include breakpoint-swap(#slideshow-social, #main-content-social);

// 	@media (min-width: $screen-sm-min) {
// 		@include hairline-border(#slideshow, #main-content-left);
// 	}

// 	#slideshow {
// 		@include make-breakpoint-column(8);

// 		img {
// 			max-width: 100%;
// 			max-height: 100%;
// 			width: 100%;
// 		}
// 	}

// 	.social {
// 		text-align: center;
// 		margin-top: $breathing-room;
// 	}
// }